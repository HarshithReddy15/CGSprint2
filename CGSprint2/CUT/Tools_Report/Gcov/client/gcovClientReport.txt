-:    0:Source:client.c
        -:    0:Graph:client.gcno
        -:    0:Data:client.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <unistd.h>
        -:    4:#include <string.h>
        -:    5:#include <arpa/inet.h>
        -:    6:#include<signal.h>
        -:    7:#define SIZE 1024
        -:    8:int flag=0;
        -:    9:
        -:   10:// Receives a file and from the client
        -:   11:// Transfers the file data to the client
        -:   12:
        1:   13:void upload(int sockfd,char *n1){
        -:   14:  FILE *fp;
        1:   15:  fp=fopen(n1,"r");
        1:   16:  if(fp==NULL){
    #####:   17:    perror("Error\n");
    #####:   18:	exit(1);
        -:   19:  }
        -:   20:  int n;
        1:   21:  char data[SIZE] = {0};
        -:   22:
        -:   23:  while(1) {
        2:   24:	if(fgets(data, SIZE, fp) != NULL){  
        1:   25:		if (send(sockfd, data, sizeof(data), 0) == -1) {
    #####:   26:			perror("[-]Error in sending file.");
    #####:   27:			exit(1);
        -:   28:		}
        1:   29:		bzero(data, SIZE);
        -:   30:	}	
        -:   31:	else{
        1:   32:		send(sockfd, data,SIZE,0);
        1:   33:		break;
        -:   34:	}
        -:   35:  }
        1:   36:}
        -:   37:
        -:   38:// Receives a file and from the client
        -:   39:// Receives the client data from the client
        -:   40:
        1:   41:void download(int sockfd,char *n1){
        -:   42:  int n;
        -:   43:  FILE *fp;
        -:   44:  char buffer[SIZE];
        1:   45:  fp = fopen(n1, "w");
        -:   46:  
        -:   47:  while (1) {
        2:   48:    n = recv(sockfd, buffer, SIZE, 0);
        2:   49:    if (strlen(buffer)==0){
        1:   50:      break;
        -:   51:    }
        1:   52:    fputs(buffer,fp);
        1:   53:    bzero(buffer, SIZE);
        -:   54:	
        -:   55:  }
        1:   56:}
        -:   57:
        -:   58:// Receives data from the view function written in server.c
        -:   59:// Called when client executes pwd/ls/cat.
        -:   60:
       17:   61:void Pipe_data(int sockfd){
        -:   62:	
        -:   63:	char buf[SIZE];
        -:   64:	while(1){
       17:   65:			recv(sockfd, buf, sizeof(buf),0);
       17:   66:			if(strlen(buf)==0){
        6:   67:				break;
        -:   68:			}
       11:   69:			printf("%s",buf);
       11:   70:			bzero(buf,1024);
        -:   71:		  }
        6:   72:}
        -:   73:
        -:   74://Authenticates the client by communicating with the server
        -:   75:
        1:   76:void auth(char *status,char *user,int sockfd){
        -:   77:	
        -:   78:  char msg[SIZE],auth[SIZE],pass[SIZE],p[SIZE];
        1:   79:  recv(sockfd,msg,SIZE,0);
        1:   80:  printf("%s",msg);
        1:   81:  scanf("%s",user);
        1:   82:  bzero(msg,SIZE);
        1:   83:  send(sockfd,user,SIZE,0);
        1:   84:  recv(sockfd,msg,SIZE,0);
        -:   85:  
        1:   86:  if(strcmp(msg,"Anonymous")!=0){
        1:   87:  flag=0;
        1:   88:  printf("%s:",msg);
        1:   89:  scanf("%s",pass);
        1:   90:  send(sockfd,pass,SIZE,0);
        1:   91:  recv(sockfd,p,SIZE,0);
        -:   92:  }
        -:   93:  else{
    #####:   94:  strcpy(user,"Anonymous");
    #####:   95:  strcpy(p,"Authenticated");
    #####:   96:  flag=1;
        -:   97:  }
        1:   98:  strcpy(status,p);
        1:   99:}
        -:  100:
        -:  101:
        -:  102:
        -:  103:
        -:  104:// Creates a client socket and connects with the server
        -:  105:// After connection is accepted and user is authenticated a menu is displayed 
        -:  106:// Users can choose an option from the menu and select bye if he wants to exit
        -:  107:
        1:  108:int main(){
        1:  109:  char *ip = "127.0.0.1";
        1:  110:  int port = 8021;
        -:  111:  int e;
        -:  112:
        -:  113:  struct sockaddr_in server_addr;
        -:  114:
        -:  115:
        1:  116:  int sockfd = socket(AF_INET, SOCK_STREAM, 0);
        1:  117:  if(sockfd < 0) {
    #####:  118:    perror("[-]Error in socket");
    #####:  119:    exit(1);
        -:  120:  }
        1:  121:  printf("[+]Server socket created successfully.\n");
        -:  122:
        1:  123:  server_addr.sin_family = AF_INET;
        1:  124:  server_addr.sin_port = port;
        1:  125:  server_addr.sin_addr.s_addr = inet_addr(ip);
        -:  126:
        1:  127:  e = connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr));
        1:  128:  if(e == -1) {
    #####:  129:    perror("[-]Error in socket");
    #####:  130:    exit(1);
        -:  131:  }
        -:  132:  
        -:  133:  
        -:  134:  char check[SIZE];
        1:  135:  recv(sockfd,check,SIZE,0);
        1:  136:  if(strcmp(check,"rejected")==0){
    #####:  137:	  printf("server rejected connection");
    #####:  138:	  close(sockfd);
    #####:  139:	  return 0;
        -:  140:  }
        1:  141:  bzero(check,SIZE);
        1:  142:  recv(sockfd,check,SIZE,0);
        1:  143:  if(strcmp(check,"Max")==0){
    #####:  144:	  printf("Max Clients reached");
    #####:  145:	  close(sockfd);
    #####:  146:	  return 0;
        -:  147:  }
        -:  148:	  
        1:  149:  printf("[+]Connected to Server.\n");
        -:  150:  
        -:  151:  
        -:  152:  char status[SIZE],user[SIZE];
        1:  153:  auth(status,user,sockfd);
        1:  154:  chdir("../data");
        -:  155:  
        1:  156:  if((strcmp(status,"Authenticated")==0)){
        1:  157:   printf("Authenticated as: %s",user);
        -:  158:  int ch;
        -:  159:  char name[100],buf[1024];
        1:  160:  buf[0]='\0';
        -:  161:  while(1){
        -:  162:	  
        9:  163:	  printf("\nEnter a choice:\n1- download - get REMOTE FILE_NAME \n2- upload - put LOCAL FILE_NAME \n3- Browse REMOTE DIRECTORY\n4- PWD\n5- Read\n6- Bye\n");
        9:  164:	  scanf("%d",&ch);
       9*:  165:	  if(flag && (ch==1)){
    #####:  166:		  printf("No Permission to execute\n");
    #####:  167:		  continue;
        -:  168:	  }
        9:  169:	  switch(ch){
        1:  170:		  case 1:
        1:  171:		  printf("enter the file to download:");
        1:  172:		  scanf("%s",name);
        1:  173:		  strcat(buf,name);
        1:  174:		  strcat(buf," get");
        1:  175:		  send(sockfd,buf,1024,0);
        1:  176:		  bzero(buf,1024);
        1:  177:		  recv(sockfd,buf,1024,0);
        1:  178:		  download(sockfd,name);
        1:  179:		  printf("Downloaded Successfully\n");
        1:  180:		  bzero(buf,1024);
        1:  181:		  break;
        -:  182:		  
        1:  183:		  case 2:
        1:  184:		  printf("enter the file to upload:");
        1:  185:		  scanf("%s",name);
        1:  186:		  strcat(buf,name);
        1:  187:		  strcat(buf," put");
        1:  188:		  send(sockfd,buf,1024,0);
        1:  189:		  bzero(buf,1024);
        1:  190:		  recv(sockfd,buf,1024,0);
        1:  191:		  upload(sockfd,name);
        1:  192:		  printf("Uploaded Successfully\n");
        1:  193:		  bzero(buf,1024);
        1:  194:		  break;
        -:  195:		  
        2:  196:		  case 3:
        2:  197:		  send(sockfd,"ls",100,0);
        2:  198:		  recv(sockfd, buf, sizeof(buf), 0);
        2:  199:		  bzero(buf,1024);
        2:  200:		  Pipe_data(sockfd);
        2:  201:		  bzero(buf,1024);
        2:  202:		  break;
        -:  203:		  
        3:  204:		  case 4:
        3:  205:		  send(sockfd,"pwd",100,0);
        3:  206:		  recv(sockfd, buf, sizeof(buf), 0);
        3:  207:		  bzero(buf,1024);
        3:  208:		  Pipe_data(sockfd);
        3:  209:		  bzero(buf,1024);
        3:  210:		  break;
        -:  211:		  
        1:  212:		  case 5:
        1:  213:		  printf("enter the file to read:");
        1:  214:		  scanf("%s",name);
        -:  215:		  
        1:  216:		  strcat(buf,name);
        1:  217:		  strcat(buf," cat");
        1:  218:		  send(sockfd,buf,100,0);
        1:  219:		  recv(sockfd, buf, sizeof(buf), 0);
        1:  220:		  bzero(buf,1024);
        -:  221:
        1:  222:		  Pipe_data(sockfd);
        1:  223:		  bzero(buf,1024);
        1:  224:		  break;
        -:  225:		  
        -:  226:		  
        1:  227:		  case 6:
        1:  228:		  send(sockfd,"exit",100,0);
        1:  229:		  printf("Quitting");
        1:  230:		  close(sockfd);
        1:  231:		  exit(0);
        -:  232:		  break;
        -:  233:		  
        -:  234:	  }
        -:  235:	  
        8:  236:	  bzero(name,100);
        8:  237:	  bzero(buf,1024);
        -:  238:  }
        -:  239:  }
        -:  240:  else{
    #####:  241:	  printf("Invalid Password");
        -:  242:  }
    #####:  243:  close(sockfd);
    #####:  244:  return 0;
        -:  245:}
