-:    0:Source:server.c
        -:    0:Graph:server.gcno
        -:    0:Data:server.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <arpa/inet.h>
        -:    5:#include<signal.h>
        -:    6:#include<unistd.h>
        -:    7:#include<sys/socket.h>
        -:    8:#define SIZE 1024
        -:    9:#define MAX_CLIENTS 1
        -:   10:
        -:   11:
        -:   12:int flag=0;
        -:   13:char u[SIZE];
        -:   14:
        -:   15:
        -:   16://Returns the ip address of the Client
        -:   17:
        1:   18:char* get_ip(struct sockaddr_in new_addr,char *ip){
        1:   19:        sprintf(ip,"%d.%d.%d.%d",new_addr.sin_addr.s_addr & 0xff,(new_addr.sin_addr.s_addr & 0xff00) >> 8,(new_addr.sin_addr.s_addr & 0xff0000) >> 16,(new_addr.sin_addr.s_addr & 0xff000000) >> 24);
        1:   20:        return ip;
        -:   21:}
        -:   22:
        -:   23:// Checks ip address of client and with the ip present in blacklist
        -:   24:// If a match is found 1 is returned and connection is refused.
        -:   25:// If no match is found 0 is returned and connection is accepted
        1:   26:int check_BlackList(char *ip){
        -:   27:        char cp[SIZE];
        -:   28:
        -:   29:        FILE *fp;
        1:   30:        fp=fopen("../etc/ftp/client_blacklist/valid_list.TXT","r");
        4:   31:        while(fgets(cp,SIZE,fp)!=NULL){
        3:   32:                cp[strlen(cp)-2]='\0';
        3:   33:                if(strcmp(ip,cp)==0){
    #####:   34:                        return 1;
        -:   35:                }
        -:   36:        }
        1:   37:        return 0;
        -:   38:}
        -:   39:
        -:   40:// Receives a file and from the client
        -:   41:// Transfers the file data to the client
        -:   42:
        1:   43:void upload(int sockfd,char *na){
        -:   44:  FILE *fp;
        1:   45:  fp=fopen(na,"r");
        1:   46:  if(fp==NULL){
    #####:   47:          exit(1);
        -:   48:  }
        -:   49:  int n;
        1:   50:  char data[SIZE] = {0};
        -:   51:
        -:   52:  while(1) {
        1:   53:        if(fgets(data, SIZE, fp) != NULL){
        -:   54:
    #####:   55:                if (send(sockfd, data, sizeof(data), 0) == -1) {
    #####:   56:                        perror("[-]Error in sending file.");
    #####:   57:                        shutdown(sockfd, SHUT_RDWR);
    #####:   58:                        exit(1);
        -:   59:                }
    #####:   60:                bzero(data, SIZE);
        -:   61:        }
        -:   62:        else{
        -:   63:
        1:   64:                send(sockfd, data,SIZE,0);
        1:   65:                break;
        -:   66:        }
        -:   67:  }
        -:   68:  
        1:   69:}
        -:   70:
        -:   71:// Receives a file and from the client
        -:   72:// Receives the client data from the client
        -:   73:
        1:   74:void download(int sockfd,char buf[SIZE]){
        -:   75:  int n;
        -:   76:  FILE *fp;
        -:   77:  char buffer[SIZE];
        1:   78:  if(flag==1){
    #####:   79:          char path[SIZE]="../Upload/";
    #####:   80:          strcat(path,buf);
    #####:   81:          strcpy(buf,path);
        -:   82:  }
        1:   83:  fp = fopen(buf, "w");
        -:   84:  
        -:   85:  while (1) {
        2:   86:    n = recv(sockfd, buffer, SIZE, 0);
        -:   87:
        2:   88:    if (strlen(buffer)== 0){
        1:   89:      break;
        -:   90:    }
        -:   91:
        1:   92:    fputs(buffer,fp);
        1:   93:    bzero(buffer, SIZE);
        -:   94:  }
        1:   95:  return;
        -:   96:}
        -:   97:
        -:   98:// Receives a command - pwd or ls or cat
        -:   99:// Opens a pipe,runs the command 
        -:  100:// Transfers the output of command to client
        4:  101:void view(int new_sock,char *ch ){
        -:  102:        FILE *fp;
        -:  103:                char data[SIZE];
        4:  104:                fp=popen(ch,"r");
        -:  105:                while(1){
        8:  106:                        if(fgets(data,SIZE,fp) != NULL){
        4:  107:                                send(new_sock,data,SIZE,0);
        -:  108:
        4:  109:                                bzero(data, SIZE);
        -:  110:                        }
        -:  111:                        else{
        4:  112:                                send(new_sock,data,SIZE,0);
        4:  113:                                break;
        -:  114:                        }
        -:  115:                }
        4:  116:}
        -:  117:
        -:  118:// Matches the username and password of client with the data from users.txt
        -:  119:// If a match is found the User is authenticated 
        -:  120:// Else if no match is found user will be treated as anonymous
        -:  121:
        1:  122:const char* authenticate(int sockfd,char user[SIZE]){
        -:  123:        FILE *fp;
        -:  124:        char dets[SIZE],name[SIZE],pass[SIZE],msg[SIZE];
        1:  125:        int found=0;
        1:  126:        fp=fopen("../data/users.TXT","r");
        -:  127:        while(1){
        3:  128:        if(fgets(dets,SIZE,fp)!=NULL){
        3:  129:                sscanf(dets,"%s %s",name,pass);
        3:  130:                if(strcmp(name,user)==0){
        1:  131:                        found=1;
        1:  132:                        break;
        -:  133:                }
        -:  134:        }
        -:  135:        else
    #####:  136:                break;
        -:  137:        }
        1:  138:        if(found){
        -:  139:                char p1[SIZE];
        1:  140:                sprintf(msg,"Welcome %s Please enter password",name);
        1:  141:                send(sockfd,msg,SIZE,0);
        1:  142:                recv(sockfd,p1,SIZE,0);
        1:  143:                if(strcmp(p1,pass)==0){
        1:  144:                        send(sockfd,"Authenticated",SIZE,0);
        1:  145:                        flag=0;
        1:  146:                        strcpy(u,name);
        1:  147:                        return "Authenticated";
        -:  148:                }
        -:  149:                else{
    #####:  150:                        send(sockfd,"Not Authenticated",SIZE,0);
    #####:  151:                        return "Not Authenticated";
        -:  152:                }
        -:  153:        }
        -:  154:        else{
    #####:  155:                send(sockfd,"Anonymous",SIZE,0);
    #####:  156:                strcpy(u,"pub");
    #####:  157:                flag=1;
    #####:  158:                return "Authenticated";
        -:  159:        }
        -:  160:
        -:  161:}
        -:  162:
        -:  163://For every new client that connects to the server handle_client is called.
        -:  164:// Here the if user authenticated, the working directory will be changed 
        -:  165:// And the server will now communicate with the client
        -:  166:
        1:  167:void handle_client(int new_sock){
        -:  168:  
        -:  169:  char user[SIZE];
        1:  170:  send(new_sock,"Please enter username:",1024,0);
        1:  171:  recv(new_sock,user,SIZE,0);
        1:  172:  char val[SIZE]={0};
        1:  173:  strcpy(val,authenticate(new_sock,user));
        -:  174:  
        1:  175:  if(strcmp(val,"Authenticated")==0){
        1:  176:  char dir[SIZE]="../var/ftp/";
        1:  177:  if(!flag)
        1:  178:          strcat(dir,u);
        -:  179:  else
    #####:  180:      strcat(dir,u);
        -:  181:    
        1:  182:  chdir(dir);
        6:  183:        while(1){
        -:  184:          char ch[SIZE],name[SIZE],case1[SIZE];
        7:  185:          recv(new_sock,ch,SIZE,0);
        -:  186:
        7:  187:          if(strcmp(ch,"exit")==0){
        -:  188:
        1:  189:                  break;
        -:  190:          }
        6:  191:          else if(strcmp(ch,"ls")==0){
        -:  192:                  
        2:  193:                send(new_sock,"Starting Pipe",SIZE,0);
        -:  194:
        2:  195:                view(new_sock,ch);
        4:  196:                continue;
        -:  197:          }
        4:  198:          else if(strcmp(ch,"pwd")==0){
        -:  199:                  
        1:  200:                send(new_sock,"Starting Pipe",SIZE,0);
        1:  201:                view(new_sock,ch);
        1:  202:                continue;
        -:  203:          }
        -:  204:         
        3:  205:          sscanf(ch,"%s %s",name,case1);
        3:  206:          if(strcmp(case1,"get")==0){
        -:  207:
        1:  208:                send(new_sock,"Starting upload",SIZE,0);
        1:  209:                upload(new_sock,name);
        -:  210:
        -:  211:          }
        2:  212:          else if(strcmp(case1,"put")==0){
        -:  213:
        1:  214:                send(new_sock,"Starting Download",SIZE,0);
        1:  215:                download(new_sock,name);
        -:  216:
        -:  217:
        -:  218:          }
        1:  219:          else if(strcmp(case1,"cat")==0){
        -:  220:
        1:  221:                send(new_sock,"Starting Pipe",SIZE,0);
        1:  222:                strcat(case1," ");
        1:  223:                strcat(case1,name);
        -:  224:
        1:  225:                view(new_sock,case1);
        1:  226:                continue;
        -:  227:
        -:  228:          }
        -:  229:          
        2:  230:          bzero(ch,SIZE);
        -:  231:  }
        -:  232:  }
        -:  233:  
        1:  234:}
        -:  235:
        -:  236:
        -:  237:
        -:  238:// Server Socket is created, bound to port 8021 and waits for clients to join 
        -:  239:// For every new client a child process is created and handle_client is called
        -:  240:// All child processes will run independently 
        -:  241:
        1:  242:int main(){
        -:  243:
        1:  244:  char *ip = "127.0.0.1";
        1:  245:  int port = 8021;
        1:  246:  int e,c=0;
        -:  247:
        -:  248:  int sockfd,new_sock;
        -:  249:  struct sockaddr_in server_addr,new_addr;
        -:  250:  socklen_t addr_size;
        -:  251:  char buffer[SIZE];
        -:  252:
        1:  253:  sockfd = socket(AF_INET, SOCK_STREAM, 0);
        1:  254:  if(sockfd < 0) {
    #####:  255:    perror("[-]Error in socket");
    #####:  256:    exit(1);
        -:  257:  }
        1:  258:  printf("[+]Server socket created successfully.\n");
        -:  259:
        1:  260:  server_addr.sin_family = AF_INET;
        1:  261:  server_addr.sin_port = port;
        1:  262:  server_addr.sin_addr.s_addr = inet_addr(ip);
        -:  263:
        1:  264:  e = bind(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr));
        1:  265:  if(e < 0) {
    #####:  266:    perror("[-]Error in bind");
    #####:  267:    shutdown(sockfd, SHUT_RDWR);
    #####:  268:    exit(1);
        -:  269:  }
        1:  270:  printf("[+]Binding successfull.\n");
        -:  271:
        1:  272:  if(listen(sockfd, 10) == 0){
        1:  273:                printf("[+]Listening....\n");
        -:  274:        }
        -:  275:  else{
    #####:  276:        perror("[-]Error in listening");
    #####:  277:    shutdown(sockfd, SHUT_RDWR);
    #####:  278:    exit(1);
        -:  279:        }
        -:  280:
        -:  281:  
    #####:  282:  while(1){
        -:  283:  int pid;
        -:  284:  
        1:  285:  addr_size = sizeof(new_addr);
        1:  286:  new_sock = accept(sockfd, (struct sockaddr*)&new_addr, &addr_size);
        -:  287:  char ip[SIZE];
        1:  288:  stpcpy(ip,get_ip(new_addr,ip));
        1:  289:  if(check_BlackList(ip)){
    #####:  290:          send(new_sock,"rejected",SIZE,0);
    #####:  291:          close(new_sock);
    #####:  292:          continue;
        -:  293:  }
        1:  294:  send(new_sock,"accepted",SIZE,0);
        1:  295:  if(c<MAX_CLIENTS){
        1:  296:  c++;
        -:  297:  
        1:  298:  send(new_sock,"joined",SIZE,0);
        -:  299:  
        1:  300:  if ((pid = fork()) < 0) { 
    #####:  301:                        perror("Error forking child process");
        1:  302:                } else if (pid == 0) { 
        1:  303:                        close(sockfd);
        1:  304:                        handle_client(new_sock);
        1:  305:                        c--;
        1:  306:                        printf("%d",c);
        1:  307:                        close(new_sock);
        1:  308:                        exit(0);
        -:  309:                }
        -:  310:
        -:  311:  }
        -:  312:
        -:  313:  else{
    #####:  314:          send(new_sock,"Max",SIZE,0);
    #####:  315:          close(new_sock);
    #####:  316:          continue;
        -:  317:          
        -:  318:  }
        -:  319:  }
        -:  320: 
        -:  321:  shutdown(sockfd, SHUT_RDWR);
        -:  322:  return 0;
        -:  323:}
