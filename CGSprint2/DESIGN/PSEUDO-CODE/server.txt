

//Program where different clients connect to a server which is accepting clients at PORT no: 8021
If the clients IP is not present in listed black_list ips at server then we accept the client connection and now client can able to browse, upload, download, view all files from the server
.
// Input Files :
1.user (Database) authentication file [users.txt]

2. Black_list file
[valid_list.txt]

// Source Codes:
1. server.c
2. client.c


// Program Flow:
Server.c 


// PseudoCode

----- Inside server.c file -----


FUNCTION get_ip:

    BEGIN

    PASS IN: struct sockaddr_in new_addr, char *ip
    PASS OUT: ip_address(char *)
    FUNCTION CALL: sprintf() : ARGUMENTS(ip, individual ips)
    RETURN: IP address in string format
    
    END FUNCTION

FUNCTION chaeck_blackList:

    BEGIN
    
    PASS IN: IP address in string format 
    PASS OUT: int 

    DECLARATION: File pointer 
    FOPEN: blacklist file 

    WHILE No data to read in black_list file THEN
        IF ip is EQUAL TO ip_in black_List file THEN
            RETURN 1
        
        END IF 
    END WHILE LOOP
    RETURN 0
    END FUNCTION


FUNCTION upload:

    BEGIN
    
    PASS IN: client sockID, file_name
    PASS OUT: Nothing(void)

    DECLARATION: File pointer 
    FOPEN: file_name, "r"
    
    DECLARATION: int n, char data[SIZE] 

    WHILE TRUE THEN
        IF  No data to read in file THEN
            RETURN 1
            IF send(socked, data), 0 is EQUAL TO -1 THEN
                  FUNCTION CALL: perror // to print Error in sending file 
                  FUNCTION CALL: Shutdown socked
                  EXIT: 1
            END IF
        BZERO: data
        ELSE
            send(sockfd, data)
            BREAK
        END IF
    END WHILE LOOP
    END FUNCTION

FUNCTION download:

    BEGIN
    
    PASS IN: client sockID, buffer
    PASS OUT: Nothing(void)

    DECLARATION: File pointer 
    IF flag==1 THEN
         SET PATH: to upload directory in anonymous user
         STRCAT: PATH and BUFFER
         STRCPY: BUFFER, PATH
    END IF
    FOPEN: file_name, "r"
    

    WHILE TRUE THEN
        ASSIGN: n to recv(sockfd, BUFFER)
        IF strlen of buffer is EQUAL TO Zero THEN
             BREAK
    
    FPUTS: buffer, fp
    BZERO: buffer
    END WHILE LOOP
    END FUNCTION


FUNCTION authenticate:

    BEGIN
    
    PASS IN: client sockID, user
    PASS OUT: char *

    DECLARATION: File pointer, STRINGS: dets, name, pass, msg, INT: found(0)
    FOPEN: users.txt, "r"
     
    WHILE TRUE THEN
        IF fegts(dets, fp) THEN
             SSCANF: dets->name pass
             IF STRCMP: name, user is EQUAL TO Zero THEN
                  ASSIGN: fount TO 1
		  BREAK
	     END IF
	ELSE
	     BREAK
	END IF
	
	IF FOUND THEN
		DECLARATION: STRING: p1
		SPRINTF: Welcome %s Please enter Password: , name)
		SEND: sockfd, msg
		RECV: sockfd, p1
		IF p1 IS EQUAL TO pass THEN
			SEND: sockfd, AUTHENTICATED
			ASSIGN: falg TO 0
			RETURN AUTHENTICATED
		ELSE
			SEND: sockfd, NOT-AUTHENTICATED
			ASSIGN: falg TO 1
			RETURN NOT-AUTHENTICATED
		END IF
	ELSE
		SEND: sockfd, AUTHENTICATED
		ASSIGN: falg TO 1
		RETURN AUTHENTICATED
	
    END WHILE LOOP
    FPUTS: buffer, fp
    BZERO: buffer
    END FUNCTION

Function main:
    BEGIN
    DECLARE ip_address,Port_Number
    Create a Secure Socket Connection
    Handle all the possible errors while creating the socket
    INFINITE WHILE LOOP BEGIN
        Accept the socket 
        Get IP by calling FUNCTION GET_IP
        IF IP is in BlackList THEN
            Send REJECTION acknowledgment to client
        ELSE
            Accept the ip connection
        END IF
        IF number_of_clients reached Maximum THEN
            PRINT "Maximum Limit Reached"
        ELSE
            Run a thread to handle new client
            FUNCTION CALL HANDLE_CLIENT
        END IF
    END WHILE
    END FUNCTION


Function handle_client:
    BEGIN
    PASS IN: new_client_socket
    PASS OUT: Nothing //void type
    Authenticate the user by FUNCTION CALL authenticate

    IF User is Authenticated THEN
        Change directory to authenticated user
        INFINITE WHILE LOOP BEGIN
            Receive command from client side
            IF command is "exit" THEN
                BREAK out from INFINITE WHILE LOOP 
            ELSE IF command is "ls" THEN
                FUNCTION CALL VIEW to display the FILES
            ELSE IF command is "pwd" THEN
                FUNCTION CALL VIEW to display the present working directory
            ELSE IF command is "get" THEN
                FUNCTION CALL UPLOAD to upload the files
            ELSE IF command is "put" THEN
                FUNCTION CALL DOWNLOAD to download the file
            ELSE IF command is "cat" THEN
                FUNCTION CALL VIEW to display the data in the file
            END IF
        END WHILE
    END IF

    END FUNCTION